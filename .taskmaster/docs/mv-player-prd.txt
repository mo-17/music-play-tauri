# MV播放功能产品需求文档 (PRD)

## 项目概述

### 项目名称
音乐播放器MV播放功能扩展

### 项目描述
在现有的跨平台音乐播放器基础上，添加完整的MV（音乐视频）播放功能，将应用升级为多媒体播放器。支持本地视频文件播放、视频库管理、播放控制、以及与音频播放的无缝切换。

### 项目目标
1. 扩展现有音乐播放器，支持视频文件播放
2. 提供完整的视频播放控制功能
3. 实现音频和视频播放模式的无缝切换
4. 保持现有音频功能的完整性
5. 提供优秀的用户体验和性能

## 功能需求

### 1. 视频文件支持
- **支持的视频格式**：MP4, AVI, MKV, MOV, WMV, FLV
- **视频编码支持**：H.264, H.265/HEVC, VP9, AV1
- **音频编码支持**：AAC, MP3, AC3, DTS
- **字幕支持**：SRT, ASS, VTT内嵌字幕
- **分辨率支持**：从480p到4K，自适应播放

### 2. 视频库管理
- **文件扫描**：扫描指定文件夹中的视频文件
- **元数据提取**：视频标题、时长、分辨率、编码信息
- **缩略图生成**：自动生成视频预览缩略图
- **分类管理**：按文件夹、格式、分辨率分类
- **搜索功能**：按文件名、路径搜索视频

### 3. 视频播放器
- **播放控制**：播放/暂停、快进/快退、跳转
- **音量控制**：音量调节、静音功能
- **播放速度**：0.25x到2x速度调节
- **全屏模式**：支持全屏播放和退出
- **画中画模式**：支持小窗口播放（如果平台支持）
- **播放进度**：进度条显示和拖拽跳转

### 4. 视频播放界面
- **播放器窗口**：可调整大小的视频播放区域
- **控制栏**：底部播放控制栏，支持自动隐藏
- **信息显示**：视频标题、时长、当前时间
- **播放列表**：视频播放队列管理
- **响应式设计**：适配不同屏幕尺寸

### 5. 播放模式集成
- **统一播放模式**：视频播放支持现有的四种播放模式
  - 顺序播放：按顺序播放视频列表
  - 列表循环：视频列表循环播放
  - 单个循环：重复播放当前视频
  - 随机播放：随机播放视频列表
- **模式切换**：音频和视频播放模式独立管理

### 6. 媒体类型切换
- **播放模式切换**：音频模式和视频模式之间切换
- **界面适配**：根据播放类型调整界面布局
- **状态保持**：切换时保持播放进度和设置
- **通知更新**：桌面通知支持视频播放信息

### 7. 性能优化
- **硬件加速**：利用GPU进行视频解码
- **内存管理**：优化大视频文件的内存使用
- **缓存机制**：缩略图和元数据缓存
- **后台播放**：支持最小化时继续播放音频

## 技术需求

### 1. 后端技术栈 (Rust/Tauri)
- **视频解码库**：使用FFmpeg或GStreamer进行视频解码
- **Tauri插件**：
  - `tauri-plugin-fs` - 文件系统访问
  - `tauri-plugin-window` - 窗口管理
  - `tauri-plugin-notification` - 通知（已有）
- **视频处理**：
  - `ffmpeg-next` - FFmpeg Rust绑定
  - `image` - 缩略图生成
  - `tokio` - 异步处理

### 2. 前端技术栈 (React/TypeScript)
- **视频播放组件**：
  - HTML5 `<video>` 元素
  - 自定义视频控制器
  - React hooks for video state management
- **UI组件库**：
  - 继续使用Lucide React图标
  - Framer Motion动画（已有）
  - TailwindCSS样式（已有）

### 3. 新增依赖
```toml
# Cargo.toml 新增依赖
[dependencies]
ffmpeg-next = "6.0"
image = "0.24"
tokio = { version = "1.0", features = ["full"] }
serde_json = "1.0"
```

```json
// package.json 新增依赖
{
  "dependencies": {
    "react-player": "^2.13.0",
    "video.js": "^8.6.1",
    "@types/video.js": "^7.3.58"
  }
}
```

## 用户界面设计

### 1. 主界面布局
- **侧边栏扩展**：添加"视频库"导航项
- **主内容区**：支持音频和视频两种显示模式
- **播放控制栏**：统一的底部控制栏，支持音频和视频

### 2. 视频库界面
- **网格视图**：视频缩略图网格显示
- **列表视图**：详细信息列表显示
- **筛选器**：按格式、分辨率、时长筛选
- **排序选项**：按名称、时长、修改时间排序

### 3. 视频播放界面
- **播放器区域**：16:9比例的视频播放区域
- **控制覆盖层**：鼠标悬停显示控制按钮
- **信息面板**：可折叠的视频信息和播放列表
- **全屏模式**：沉浸式全屏播放体验

### 4. 响应式设计
- **桌面端**：大屏幕优化的视频播放体验
- **移动端**：触摸友好的控制界面
- **平板端**：中等屏幕的平衡布局

## 数据结构

### 1. 视频文件数据结构
```typescript
interface VideoFile {
  id: string;
  title: string;
  file_path: string;
  duration: number;
  resolution: {
    width: number;
    height: number;
  };
  format: string;
  codec: string;
  file_size: number;
  thumbnail_path?: string;
  created_at: string;
  modified_at: string;
}
```

### 2. 播放状态扩展
```typescript
interface MediaPlaybackState {
  media_type: 'audio' | 'video';
  is_playing: boolean;
  current_media: string | null;
  position: number;
  duration: number;
  volume: number;
  playback_rate: number;
  is_fullscreen?: boolean;
}
```

## 实现阶段

### 阶段1：基础视频播放 (2-3周)
1. 视频文件格式支持和解码
2. 基础视频播放器组件
3. 简单的播放控制功能
4. 视频文件扫描和识别

### 阶段2：视频库管理 (2周)
1. 视频库界面设计和实现
2. 缩略图生成和缓存
3. 视频元数据提取和存储
4. 搜索和筛选功能

### 阶段3：高级播放功能 (2周)
1. 全屏播放模式
2. 播放速度控制
3. 字幕支持（如果需要）
4. 画中画模式（平台支持）

### 阶段4：集成和优化 (1-2周)
1. 音频和视频播放模式集成
2. 播放模式统一管理
3. 性能优化和内存管理
4. 用户体验优化

### 阶段5：测试和完善 (1周)
1. 功能测试和bug修复
2. 性能测试和优化
3. 用户界面完善
4. 文档更新

## 风险和挑战

### 1. 技术风险
- **视频解码性能**：大视频文件可能影响应用性能
- **内存使用**：视频播放可能消耗大量内存
- **平台兼容性**：不同平台的视频支持差异
- **硬件加速**：GPU加速的实现复杂性

### 2. 用户体验风险
- **界面复杂性**：功能增加可能影响界面简洁性
- **学习成本**：用户需要适应新的视频功能
- **性能感知**：视频播放的流畅性要求更高

### 3. 开发风险
- **开发时间**：视频功能开发复杂度较高
- **测试覆盖**：需要测试多种视频格式和场景
- **维护成本**：视频功能增加维护复杂性

## 成功指标

### 1. 功能指标
- 支持主流视频格式播放成功率 > 95%
- 视频播放启动时间 < 2秒
- 1080p视频播放流畅度 > 30fps
- 应用启动时间增加 < 20%

### 2. 用户体验指标
- 界面响应时间 < 100ms
- 视频切换时间 < 1秒
- 全屏模式切换时间 < 500ms
- 用户操作学习时间 < 5分钟

### 3. 性能指标
- 内存使用增加 < 50%
- CPU使用率 < 30%（播放1080p视频）
- 应用包大小增加 < 100MB
- 电池续航影响 < 20%

## 后续扩展

### 1. 高级功能
- 在线视频流播放
- 视频编辑功能
- 字幕编辑和同步
- 视频格式转换

### 2. 社交功能
- 播放历史记录
- 收藏和评分
- 播放列表分享
- 观看统计

### 3. 云服务集成
- 云端视频库同步
- 在线字幕下载
- 视频信息获取
- 远程播放控制

## 结论

MV播放功能的添加将显著提升应用的价值和竞争力，但需要仔细规划和实施以确保质量和性能。建议采用分阶段开发的方式，优先实现核心功能，然后逐步添加高级特性。

重点关注：
1. 保持现有音频功能的稳定性
2. 确保视频播放的流畅性和兼容性
3. 维护简洁直观的用户界面
4. 优化性能和资源使用

通过合理的架构设计和实施计划，这个项目有望成功地将音乐播放器升级为功能完整的多媒体播放器。 